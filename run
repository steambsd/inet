#!/bin/sh
############################################
###          SIMPLE INSTALLATION         ###
###                 STEAM                ###   
###              ON FREEBSD              ###
############   set permission   ############
chmod +x info
chmod +x reconfig
chmod +x steam-acolyte-safe
chmod +x steam-acolyte-wheel
chmod +x steam-linux-safe
chmod +x steam-linux-wheel
chmod +x steam-wine-safe
chmod +x steam-wine-wheel
chmod +x utils

############################################
### Variables                            ###
############################################
# main dir
MATH=`echo $PWD`
# user with wheel group
AZER=$1
# choose driver for your PC, it may be: 
# nvidia, amdgpu, radeon, intel or vesa
DRIV=$2
# desktop environment 
DENV=$3
# version
VERS=`uname -r | cut -d'-' -f1`
#VERS='12.0' #not tested
#VERS='12.1' #rebuild drm
#VERS='12.2' #without drm

############################################
### Function                             ###
############################################
# package type installation (local or inet)
pli()
{
if [ -d All ]; then
zvar=`ls All | grep $1 | awk '{ print length, $0 }' | sort -n | cut -d" " -f2- | head -1`
pkg add All/$zvar
#pkg add All/$1-*
else
pkg ins -y $1
fi
}

############################################
### Motd                            ###
############################################
# Build date used for motd and product file
BUILDDATE=$(date +%Y%m%d)
RELEASE="$VERS"
DOC_URL="https://lpros.blogspot.com/"

# Creating /etc/motd
cat << MOTD > /etc/motd.safe
 -=Lpros=-
     LTD
                         Instance (SteamBSD $RELEASE $BUILDDATE)
                          $DOC_URL
MOTD
# Creating /etc/product file
cat << PRODUCT > /etc/product.safe
Name: SteamBSD Instance
Image: SteamBSD $RELEASE $BUILDDATE
Documentation: $DOC_URL
Description: SteamBSD $RELEASE 64-bit image with just essential packages \
installed. Find your favorite game and forget about everything \
that might bother you.
PRODUCT

############################################
### Bugs                                 ###
############################################
# drm-kmod not work on FreeBSD 12.2
#if [ $DRIV != 'nvidia' ]; then DRIV='vesa'; fi

############################################
### Check system                         ###
############################################
# blank arguments
case "$#" in
0)
 # default: user - admin, driver - nvidia, desktop - lumina
 AZER='admin'
 pw useradd $AZER -m -b /usr/home -G wheel; echo 0000 | pw usermod $AZER -h0
 DRIV='nvidia'
 DENV='lumina'
 ;;
3)
 # add if not exist
 pw usershow $AZER || chk=1
 if [ $chk = 1 ]; then
  echo "Create user $AZER"
  pw useradd $AZER -m
  echo '0000' | pw usermod $AZER -h0
 fi
 # try to wheel
 pw usermod $AZER -G wheel
 ;;
*)
 echo "Error. Please, type three arguments."
 echo "Usage: $0 [your_user] [video_driver] [your_desktop]"
 exit 0
 ;;
esac

############################################
### Tuning                               ###
############################################
# /boot/loader.conf
sysrc -f /boot/loader.conf autoboot_delay=2
sysrc -f /boot/loader.conf beastie_disable=YES
# /etc/sysctl.conf
echo 'kern.coredump=0' >> /etc/sysctl.conf
sysctl kern.coredump=0
# /etc/rc.conf
sysrc clear_tmp_enable=YES
sysrc sendmail_enable=NO
sysrc moused_enable=NO
sysrc sshd_enable=NO
## view startup log
#echo 'console.info                                    /var/log/console.log' >> /etc/syslog.conf
#touch /var/log/console.log
#chmod 600 /var/log/console.log
#sysrc syslogd_enable=YES
#service syslogd restart

############################################
### Update                               ###
############################################
if [ -d All ]; then
tar xf All/pkg-* -s ",/.*/,,g" "*/pkg-static"
./pkg-static add All/pkg-*
else
# system
env PAGER=cat freebsd-update fetch
freebsd-update install
# pkg
env ASSUME_ALWAYS_YES=YES pkg bootstrap
env ASSUME_ALWAYS_YES=YES pkg update -f
fi

############################################
### Prepare                              ###
############################################
# privilegies
pli sudo
pli bash
echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /usr/local/etc/sudoers
pw usermod $AZER -s /usr/local/bin/bash
# user for steam
pw useradd steam -m
pw usermod steam -s /usr/local/bin/bash
# user for steam development
pw useradd steamdev -m
pw usermod steamdev -s /usr/local/bin/bash
# linux
sysrc linux_enable=YES
sysrc linux64_enable=YES
kldload linux
kldload linux64

############################################
### Packages                             ###
############################################
# packages for WM
pli xorg
pli slim
# packages for wine
pli i386-wine
pli winetricks
pli wine-mono
pli wine-gecko
# packages for linux
pli linux-steam-utils
#sudo su steam -c steam-install
# packages for console
pli screenFetch
pli mc
# packages for info
pli lxterminal
pli leafpad
# packages for comfort
pli chromium
pli smplayer
pli simplescreenrecorder
# packages for desktop
pli compton
pli cairo-clock
# pip
#pli python
#pli qt5
#pli py37-pip
echo 'export PATH=$PATH:.local/bin/' >> /home/$AZER/.bashrc
# python38
pli python38
pli py38-setuptools

############################################
### DVD, USB and CLOUD                   ###
############################################
# DVD
pli xfburn
cat << EOF >> /etc/devfs.conf
own cd0 root:operator
perm cd0 0660

own     pass2      root:operator
perm    pass2      0666

own     xpt0       root:operator
perm    xpt0       0666
EOF
cat << EOF >> /etc/devfs.rules
        [system=10]
        add path 'acd*' mode 0666
        add path 'cd*' mode 0666
        add path 'pass*' mode 0666
        add path 'xpt*' mode 0666
EOF
sysrc -f /boot/loader.conf udf_load=YES
kldload udf

# USB
sysrc -f /boot/loader.conf fusefs_load=YES
kldload fusefs
sysrc -f /boot/loader.conf ext2fs_load=YES
kldload ext2fs
pli fusefs-ntfs
echo 'export NTFS_USE_UBLIO=0' >> /home/$AZER/.bashrc
cat << EOF >> /etc/devfs.rules
add path 'da*' mode 0660 group operator
add path 'ugen*' mode 0660 group operator
EOF

echo 'vfs.usermount=1' >> /etc/sysctl.conf
sysctl vfs.usermount=1
sysrc devfs_system_ruleset=system
service devfs start

# CLOUD
pli megatools

############################################
### Driver                               ###
############################################
case "$DRIV" in
 nvidia)
pli nvidia-driver
pli linux-nvidia-libs
pli nvidia-settings
sysrc kld_list+="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 nvidia-390)
pli nvidia-driver-390
pli linux-nvidia-libs-390
pli nvidia-settings
sysrc kld_list+="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 nvidia-340)
pli nvidia-driver-340
pli linux-nvidia-libs-340
pli nvidia-settings
sysrc kld_list+="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 nvidia-304)
pli nvidia-driver-304
pli linux-nvidia-libs-304
pli nvidia-settings
sysrc kld_list+="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 amdgpu)
pli drm-kmod
pw groupmod video -m $AZER
pw groupmod video -m steam
pw groupmod video -m steamdev
pli xf86-video-amdgpu
sysrc kld_list+="/boot/modules/amdgpu.ko"
kldload /boot/modules/amdgpu.ko
#cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
#Section "Device"
#        Identifier "Card0"
#        Driver     "amdgpu"
#EndSection
#EOF
 ;;
  radeon)
pli drm-kmod
pw groupmod video -m $AZER
pw groupmod video -m steam
pw groupmod video -m steamdev
#pli xf86-video-ati
sysrc kld_list+="/boot/modules/radeonkms.ko"
kldload /boot/modules/radeonkms.ko
#cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
#Section "Device"
#        Identifier "Card0"
#        Driver     "radeonkms"
#EndSection
#EOF
 ;;
 intel)
pli drm-kmod
pw groupmod video -m $AZER
pw groupmod video -m steam
pw groupmod video -m steamdev
pli xf86-video-intel
sysrc kld_list+="/boot/modules/i915kms.ko"
kldload /boot/modules/i915kms.ko
#cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
#Section "Device"
#        Identifier "Card0"
#        Driver     "intel"
#EndSection
#EOF
 ;;
 *)
#cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
# Section "Device"
#    Identifier    "Card0"
#    Driver        "vesa"
# EndSection 
#EOF
 ;;
esac

case "$VERS" in
 12.0)
  #cd /usr/ports/graphics/drm-kmod && make BATCH=yes deinstall build install clean 
 ;;
 12.1)
  #fetch https://download.freebsd.org/ftp/releases/amd64/12.1-RELEASE/base.txz
  #fetch https://download.freebsd.org/ftp/releases/amd64/12.1-RELEASE/lib32.txz
  #tar -xvf base.txz -C /data/jails/basejail && tar -xvf lib32.txz -C /data/jails/basejail
  #rm -rf base.txz && rm -rf lib32.txz
  svnlite checkout http://svn.freebsd.org/base/releng/12.1/ /usr/src
  fetch https://github.com/FreeBSDDesktop/kms-drm/archive/drm-v5.0-fbsd12.1.zip
  unzip drm-v5.0-fbsd12.1.zip 
  mv kms-drm-drm-v5.0-fbsd12.1 kms-drm
  cd kms-drm
  make
  make install
  rm -rf kms-drm
  rm -rf drm-v5.0-fbsd12.1.zip
  #cp ./pci.ids /usr/local/share/pciids/pci.ids
 ;;
 12.2)
  sysrc kld_list-="/boot/modules/amdgpu.ko"
  sysrc kld_list-="/boot/modules/i915kms.ko"
  sysrc kld_list-="/boot/modules/radeonkms.ko"
  kldunload "/boot/modules/amdgpu.ko"
  kldunload "/boot/modules/i915kms.ko"
  kldunload "/boot/modules/radeonkms.ko"
 ;;
 13.0)
  echo 'Detect latest system'
  
 ;;
 *)
  echo -n 'Script is not intended for installation on this version of the system: '
  echo -n $VERS
  exit 0
 ;;
esac

############################################
### Files                                ###
############################################
# create documents folder
mkdir /home/$AZER/Documents
# copy steambsd scrips
cp info /home/$AZER/.info
cp reconfig /home/$AZER/
cp steam-linux-safe /home/$AZER/.steam-linux-safe
cp steam-linux-wheel /home/$AZER/.steam-linux
cp steam-wine-safe /home/$AZER/.steam-wine-safe
cp steam-wine-wheel /home/$AZER/.steam-wine
cp steam-acolyte-safe /home/$AZER/.steam-acolyte-safe
cp steam-acolyte-wheel /home/$AZER/.steam-acolyte

cp utils /home/$AZER/.utils
# wallpaper
mkdir /usr/local/share/wallpapers
cp wall.jpg /usr/local/share/wallpapers/wall.jpg
#chown -R $AZER:wheel /usr/local/share/wallpapers
# icons
mkdir /usr/local/share/pixmaps
cp zico-acolyte.png /usr/local/share/pixmaps/zico-acolyte.png
cp zico-linux.png /usr/local/share/pixmaps/zico-linux.png
cp zico-wine.png /usr/local/share/pixmaps/zico-wine.png
cp ysettings.png /usr/local/share/pixmaps/ysettings.png
#chown -R $AZER:wheel /usr/local/share/pixmaps
#epic-games
unzip epic-games.zip
cd legendary-master
/usr/local/bin/python3.8 setup.py install
cd ..
echo alias epic=\'legendary\' >> /home/$AZER/.bashrc
# steam-acolyte
cp steam-acolyte.tar.gz /home/$AZER/steam-acolyte.tar.gz
cd /home/$AZER
tar xvf steam-acolyte.tar.gz
rm steam-acolyte.tar.gz
chown -R $AZER:wheel /home/$AZER/.local
chmod -R +x /home/$AZER/.local/bin/
# terminal customization
echo alias ls=\'ls -G\' >> /root/.bashrc
echo alias ls=\'ls -G\' >> /home/$AZER/.bashrc

############################################
### Login manager                        ###
############################################
# slim customization
sysrc dbus_enable=YES
sysrc hald_enable=YES
sysrc slim_enable=YES
echo "default_user        $AZER" >> /usr/local/etc/slim.conf
echo 'auto_login          yes' >> /usr/local/etc/slim.conf
echo 'focus_password      yes' >> /usr/local/etc/slim.conf
# bugs
cat << EOF >> /etc/crontab
@reboot                                 root    service slim start
EOF

############################################
### Desktop environment                  ###
############################################
cd $MATH
pw groupmod operator -m $AZER
# choose desktop
case "$DENV" in
plasma)
pli plasma5-plasma
echo 'startplasma-x11' >> /home/$AZER/.xinitrc
 ;;
lumina)
pli lumina
echo 'start-lumina-desktop' >> /home/$AZER/.xinitrc
 ;;
lxqt)
pli lxqt
echo 'startlxqt' >> /home/$AZER/.xinitrc
printf '%s\n' /General/a 'window_manager=openbox' . w q | ex -s /usr/local/share/lxqt/session.conf
 ;;
lxde)
pli lxde-meta
echo 'startlxde' >> /home/$AZER/.xinitrc
 ;;
*)
 echo "Error. Unrecognized desktop."
 exit 0
 ;;
esac

# adding buttons
cat << EOF >> /usr/local/etc/polkit-1/rules.d/50-default.rules
polkit.addRule(function (action, subject) 
  if ((action.id == "org.freedesktop.consolekit.system.restart" ||
      action.id == "org.freedesktop.consolekit.system.stop")
      && subject.isInGroup("wheel")) {
    return polkit.Result.YES;
  }
});
EOF

# autostart
cat << EOF >> /usr/local/etc/xdg/autostart/reconfig.desktop 
[Desktop Entry]
Name=reconfig
Type=Application
Exec=xterm -geometry 50x15+0-25 -e ~/reconfig
Terminal=false
EOF
#cat << EOF >> /usr/local/etc/xdg/autostart/utils.desktop 
#[Desktop Entry]
#Name=utils
#Type=Application
#Exec=xterm -geometry 73x31-0-25 -e ./.utils
#Terminal=false
#EOF
cat << EOF >> /usr/local/etc/xdg/autostart/steam-wine.desktop 
[Desktop Entry]
Name=steam-wine
Type=Application
Exec=xterm -geometry 40x4-250+0 -e ~/.steam-wine
Terminal=false
EOF
cat << EOF >> /usr/local/etc/xdg/autostart/steam-linux.desktop 
[Desktop Entry]
Name=steam-linux
Type=Application
Exec=xterm -geometry 40x4-0+0 -e ~/.steam-linux
Terminal=false
EOF
cat << EOF >> /usr/local/etc/xdg/autostart/steam-acolyte.desktop 
[Desktop Entry]
Name=steam-acolyte
Type=Application
Exec=xterm -geometry 40x4-500+0 -e ~/.steam-acolyte
Terminal=false
EOF
cat << EOF >> /usr/local/etc/xdg/autostart/cairo-clock.desktop 
[Desktop Entry]
Name=cairo-clock
Type=Application
Exec=cairo-clock -w 200 -h 200 -x 200 -y 200 -s -t simple
Terminal=false
EOF
cat << EOF >> /usr/local/etc/xdg/autostart/compton.desktop 
[Desktop Entry]
Name=compton
Type=Application
Exec=compton
Terminal=false
EOF

############################################
### Final stage                          ###
############################################
# set permission
chown -R $AZER:wheel /home/$AZER/
# startx
service dbus start
service hald start
service slim start
su $AZER -c 'startx'
